<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeAppStore.License</name>
    </assembly>
    <members>
        <member name="T:CodeAppStore.License.EncodeDecodeRepo.EncodeDecode">
            <summary>
            Encode Decode Class
            </summary>
        </member>
        <member name="M:CodeAppStore.License.EncodeDecodeRepo.EncodeDecode.Encrypt(System.String)">
            <summary>
            Takes String and Encrypts the string 
            </summary>
            <param name="encryptString"></param>
            <returns> Encrypted String <see cref="T:System.String"/>  </returns>
        </member>
        <member name="M:CodeAppStore.License.EncodeDecodeRepo.EncodeDecode.Decrypt(System.String)">
            <summary>
            Decrypts the Encrypted String <see cref="M:CodeAppStore.License.EncodeDecodeRepo.EncodeDecode.Encrypt(System.String)"/>
            </summary>
            <param name="encryptedText"></param>
            <returns> Decrypted string <see cref="T:System.String"/>   </returns>
        </member>
        <member name="T:CodeAppStore.License.EncodeDecodeRepo.IEncodeDecode">
            <summary>
            Encode Decode interface
            </summary>
        </member>
        <member name="M:CodeAppStore.License.EncodeDecodeRepo.IEncodeDecode.Encrypt(System.String)">
            <summary>
            Takes String and Encrypts the string 
            </summary>
            <param name="encryptString"></param>
            <returns> Encrypted String <see cref="T:System.String"/>  </returns>
        </member>
        <member name="M:CodeAppStore.License.EncodeDecodeRepo.IEncodeDecode.Decrypt(System.String)">
            <summary>
            Decrypts the Encrypted String <see cref="M:CodeAppStore.License.EncodeDecodeRepo.IEncodeDecode.Encrypt(System.String)"/>
            </summary>
            <param name="encryptedText"></param>
            <returns> Decrypted string <see cref="T:System.String"/>   </returns>
        </member>
        <member name="T:CodeAppStore.License.LicenseRepo.ILicense">
            <summary>
            Interface of License
            </summary>
        </member>
        <member name="M:CodeAppStore.License.LicenseRepo.ILicense.GenerateClientCode(System.String)">
            <summary>
            Generates client code using email
            </summary>
            <param name="email"></param>
            <returns>  Client Code <see cref="T:System.String"/> </returns>
        </member>
        <member name="M:CodeAppStore.License.LicenseRepo.ILicense.GenerateProjectCode(System.String)">
            <summary>
             Generates project code using project name
            </summary>
            <param name="projectName"></param>
            <returns> Project Code <see cref="T:System.String"/>  </returns>
        </member>
        <member name="M:CodeAppStore.License.LicenseRepo.ILicense.GenerateCertificate(System.String,System.String)">
            <summary>
             Creates Certificates using ClientCode <see cref="M:CodeAppStore.License.LicenseRepo.ILicense.GenerateClientCode(System.String)"/> and ProductCode <see cref="M:CodeAppStore.License.LicenseRepo.ILicense.GenerateProjectCode(System.String)"/>
            </summary>
            <param name="clientCode"></param>
            <param name="projectCode"></param>
            <returns> Certificate <see cref="T:System.String"/> </returns>
        </member>
        <member name="M:CodeAppStore.License.LicenseRepo.ILicense.CheckLicenseVerification(System.String,System.String,System.String,System.String)">
            <summary>
            Validates the input
            Certificate [<see cref="M:CodeAppStore.License.LicenseRepo.ILicense.GenerateCertificate(System.String,System.String)"/>],
            ClientCode [<see cref="M:CodeAppStore.License.LicenseRepo.ILicense.GenerateClientCode(System.String)"/>] and
            ProjectCode [<see cref="M:CodeAppStore.License.LicenseRepo.ILicense.GenerateProjectCode(System.String)"/>]
            using <see cref="!:IsValid"/>
            using <see cref="!:ExpiresIn"/> and 
            using <see cref="!:IsExpired"/>.
            </summary>
            <param name="license"></param>
            <param name="certificate"></param>
            <param name="clientCode"></param>
            <param name="projectCode"></param>
            <returns>
            License Verification Object <see cref="T:CodeAppStore.License.LicenseRepo.LicenseVerificationObject"/>
            </returns>
        </member>
        <member name="T:CodeAppStore.License.LicenseRepo.License">
            <summary>
            License Class used to generate and verify license
            </summary>
        </member>
        <member name="M:CodeAppStore.License.LicenseRepo.License.GenerateClientCode(System.String)">
            <summary>
            Generates client code using email
            </summary>
            <param name="email"></param>
            <returns>  Client Code <see cref="T:System.String"/> </returns>
        </member>
        <member name="M:CodeAppStore.License.LicenseRepo.License.GenerateProjectCode(System.String)">
            <summary>
             Generates project code using project name
            </summary>
            <param name="projectName"></param>
            <returns> Project Code <see cref="T:System.String"/>  </returns>
        </member>
        <member name="M:CodeAppStore.License.LicenseRepo.License.GenerateCertificate(System.String,System.String)">
            <summary>
             Creates Certificates using ClientCode <see cref="M:CodeAppStore.License.LicenseRepo.License.GenerateClientCode(System.String)"/> and ProductCode <see cref="M:CodeAppStore.License.LicenseRepo.License.GenerateProjectCode(System.String)"/>
            </summary>
            <param name="clientCode"></param>
            <param name="projectCode"></param>
            <returns> Certificate <see cref="T:System.String"/> </returns>
        </member>
        <member name="M:CodeAppStore.License.LicenseRepo.License.GenerateLicense(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
               Generates license using parameters
            </summary>
            <param name="clientCode"></param>
            <param name="certificate"></param>
            <param name="issuedDate"></param>
            <param name="expiryDate"></param>
            <returns>
            License <see cref="T:System.String"/>
            <code>
            If(result == null){"Invalid issued date, Entered issued date should be less than current date."}
            </code>
            </returns>
        </member>
        <member name="M:CodeAppStore.License.LicenseRepo.License.LicenseElements(System.String)">
            <summary>
            Returns License Elements by decoding the License
            </summary>
            <param name="license"></param>
            <returns>
            License Object <see cref="T:CodeAppStore.License.LicenseRepo.LicenseObject"/>
            </returns>
        </member>
        <member name="M:CodeAppStore.License.LicenseRepo.License.DateParser(System.String)">
            <summary>
            Receives dates in MMddYYYY format and returns MM/DD/YYYY
            </summary>
            <param name="date"></param>
            <returns>MM/DD/YYYY <see cref="T:System.DateTime"/> </returns>
        </member>
        <member name="M:CodeAppStore.License.LicenseRepo.License.IsExpired(System.String)">
            <summary>
            Checks if the input license has expired
            </summary>
            <param name="license"></param>
            <returns> True || False <see cref="T:System.Boolean"/> </returns>
        </member>
        <member name="M:CodeAppStore.License.LicenseRepo.License.ExpiresIn(System.String)">
            <summary>
            Fetch Dates from License and check if license is expired and calculate days to expiry
            </summary>
            <param name="license"></param>
            <returns> Expires in x days  <see cref="T:System.String"/> </returns>
        </member>
        <member name="M:CodeAppStore.License.LicenseRepo.License.IsValid(System.String,System.String,System.String,System.String)">
            <summary>
                Checks if The Decoded License Variables and Input Variables match or not
            </summary>
            <param name="license"></param>
            <param name="certificate"></param>
            <param name="clientCode"></param>
            <param name="projectCode"></param>
            <returns> True || False <see cref="T:System.Boolean"/> </returns>
        </member>
        <member name="M:CodeAppStore.License.LicenseRepo.License.CheckLicenseVerification(System.String,System.String,System.String,System.String)">
            <summary>
            Validates the input
            Certificate [<see cref="M:CodeAppStore.License.LicenseRepo.License.GenerateCertificate(System.String,System.String)"/>],
            ClientCode [<see cref="M:CodeAppStore.License.LicenseRepo.License.GenerateClientCode(System.String)"/>] and
            ProjectCode [<see cref="M:CodeAppStore.License.LicenseRepo.License.GenerateProjectCode(System.String)"/>]
            using <see cref="M:CodeAppStore.License.LicenseRepo.License.IsValid(System.String,System.String,System.String,System.String)"/>
            using <see cref="M:CodeAppStore.License.LicenseRepo.License.ExpiresIn(System.String)"/> and 
            using <see cref="M:CodeAppStore.License.LicenseRepo.License.IsExpired(System.String)"/>.
            </summary>
            <param name="license"></param>
            <param name="certificate"></param>
            <param name="clientCode"></param>
            <param name="projectCode"></param>
            <returns>
            License Verification Object <see cref="T:CodeAppStore.License.LicenseRepo.LicenseVerificationObject"/>
            </returns>
        </member>
        <member name="T:CodeAppStore.License.LicenseRepo.LicenseObject">
            <summary>
            License Object <see cref="T:CodeAppStore.License.LicenseRepo.LicenseObjectBase"/>
            </summary>
        </member>
        <member name="T:CodeAppStore.License.LicenseRepo.LicenseObjectBase">
            <summary>
            License Object Base returned after License details is decoded
            <list type="LicenseObjectBase">
            ClientCode <see cref="T:System.String"/>,
            ProjectCode <see cref="T:System.String"/>,
            Certificate <see cref="T:System.String"/>,
            Issued <see cref="T:System.DateTime"/>,
            Expired <see cref="T:System.DateTime"/>
            </list>
            </summary>
        </member>
        <member name="T:CodeAppStore.License.LicenseRepo.LicenseVerificationObject">
            <summary>
            License Verification Object  <see cref="T:CodeAppStore.License.LicenseRepo.LicenseVerificationObjectBase"/>
            </summary>
        </member>
        <member name="T:CodeAppStore.License.LicenseRepo.LicenseVerificationObjectBase">
            <summary>
            License Verification Object Base returned after License is Verified
            <list type="LicenseVerificationObjectBase">
            IsExpired <see cref="T:System.Boolean"/>,
            IsValid <see cref="T:System.Boolean"/>,
            Expiry <see cref="T:System.String"/>
            </list>
            </summary>
        </member>
        <member name="T:CodeAppStore.License.RandomStringRepo.IRandomString">
            <summary>
            Random String interface
            </summary>
        </member>
        <member name="M:CodeAppStore.License.RandomStringRepo.IRandomString.RandomStringGenerator(System.Int16,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Generates random string according to <see cref="T:CodeAppStore.License.RandomStringRepo.RandomStringPurpose"/> and can return uppercase or lowercase as well
            </summary>
            <param name="purpose"></param>
            <param name="maxSize"></param>
            <param name="capital"></param>
            <param name="small"></param>
            <returns>
               Random String according to <see cref="T:CodeAppStore.License.RandomStringRepo.RandomStringPurpose"/> <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="T:CodeAppStore.License.RandomStringRepo.RandomString">
            <summary>
            Random String Class
            </summary>
        </member>
        <member name="F:CodeAppStore.License.RandomStringRepo.RandomString.O90DFL">
            <summary>
            Uses different characters for different random string as per <see cref="T:CodeAppStore.License.RandomStringRepo.RandomStringPurpose"/>
            </summary>
        </member>
        <member name="M:CodeAppStore.License.RandomStringRepo.RandomString.RandomStringGenerator(System.Int16,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Generates random string according to <see cref="T:CodeAppStore.License.RandomStringRepo.RandomStringPurpose"/> and can return uppercase or lowercase as well
            </summary>
            <param name="purpose"></param>
            <param name="maxSize"></param>
            <param name="capital"></param>
            <param name="small"></param>
            <returns>
               Random String according to <see cref="T:CodeAppStore.License.RandomStringRepo.RandomStringPurpose"/> <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:CodeAppStore.License.RandomStringRepo.RandomString.Password(System.Int32,System.Int16)">
            <summary>
            Generates random password
            </summary>
            <param name="maxSize"></param>
            <param name="purpose"></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:CodeAppStore.License.RandomStringRepo.RandomString.Id(System.Int32,System.Int16)">
            <summary>
            Generates Random String
            </summary>
            <param name="maxSize"></param>
            <param name="purpose"></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:CodeAppStore.License.RandomStringRepo.RandomString.Token(System.Int32,System.Int16)">
            <summary>
            Generates random token
            </summary>
            <param name="maxSize"></param>
            <param name="purpose"></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:CodeAppStore.License.RandomStringRepo.RandomString.UpperCase(System.String)">
            <summary>
            Converts normal string to uppercase
            </summary>
            <param name="input"></param>
            <returns>UPPERCASE STRING <see cref="T:System.String"/></returns>
        </member>
        <member name="M:CodeAppStore.License.RandomStringRepo.RandomString.LowerCase(System.String)">
            <summary>
            Converts to lowercase string
            </summary>
            <param name="input"></param>
            <returns>lowercase string <see cref="T:System.String"/></returns>
        </member>
        <member name="M:CodeAppStore.License.RandomStringRepo.RandomString.RndString(System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Generates random string using the predefined <see cref="F:CodeAppStore.License.RandomStringRepo.RandomString._dictionary"/>
            </summary>
            <param name="maxSize"></param>
            <param name="dictionary"></param>
            <param name="min"></param>
            <returns> Random String <see cref="T:System.String"/></returns>
        </member>
        <member name="T:CodeAppStore.License.RandomStringRepo.RandomStringPurpose">
            <summary>
            Purpose of String Enum used to define values from 0-3
            <list type="LicenseObjectBase">
            Password = 0,
            Id = 1,
            Token = 2 and
            Default = 3
            </list>
            </summary>
        </member>
    </members>
</doc>
